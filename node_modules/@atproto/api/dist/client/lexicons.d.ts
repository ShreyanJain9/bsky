import { LexiconDoc, Lexicons } from '@atproto/lexicon';
export declare const schemaDict: {
    ComAtprotoAdminDefs: {
        lexicon: number;
        id: string;
        defs: {
            actionView: {
                type: string;
                required: string[];
                properties: {
                    id: {
                        type: string;
                    };
                    action: {
                        type: string;
                        ref: string;
                    };
                    subject: {
                        type: string;
                        refs: string[];
                    };
                    subjectBlobCids: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    createLabelVals: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    negateLabelVals: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    reason: {
                        type: string;
                    };
                    createdBy: {
                        type: string;
                        format: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    reversal: {
                        type: string;
                        ref: string;
                    };
                    resolvedReportIds: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                };
            };
            actionViewDetail: {
                type: string;
                required: string[];
                properties: {
                    id: {
                        type: string;
                    };
                    action: {
                        type: string;
                        ref: string;
                    };
                    subject: {
                        type: string;
                        refs: string[];
                    };
                    subjectBlobs: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    createLabelVals: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    negateLabelVals: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    reason: {
                        type: string;
                    };
                    createdBy: {
                        type: string;
                        format: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    reversal: {
                        type: string;
                        ref: string;
                    };
                    resolvedReports: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            actionViewCurrent: {
                type: string;
                required: string[];
                properties: {
                    id: {
                        type: string;
                    };
                    action: {
                        type: string;
                        ref: string;
                    };
                };
            };
            actionReversal: {
                type: string;
                required: string[];
                properties: {
                    reason: {
                        type: string;
                    };
                    createdBy: {
                        type: string;
                        format: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                };
            };
            actionType: {
                type: string;
                knownValues: string[];
            };
            takedown: {
                type: string;
                description: string;
            };
            flag: {
                type: string;
                description: string;
            };
            acknowledge: {
                type: string;
                description: string;
            };
            reportView: {
                type: string;
                required: string[];
                properties: {
                    id: {
                        type: string;
                    };
                    reasonType: {
                        type: string;
                        ref: string;
                    };
                    reason: {
                        type: string;
                    };
                    subject: {
                        type: string;
                        refs: string[];
                    };
                    reportedBy: {
                        type: string;
                        format: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    resolvedByActionIds: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                };
            };
            reportViewDetail: {
                type: string;
                required: string[];
                properties: {
                    id: {
                        type: string;
                    };
                    reasonType: {
                        type: string;
                        ref: string;
                    };
                    reason: {
                        type: string;
                    };
                    subject: {
                        type: string;
                        refs: string[];
                    };
                    reportedBy: {
                        type: string;
                        format: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    resolvedByActions: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            repoView: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    email: {
                        type: string;
                    };
                    relatedRecords: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    moderation: {
                        type: string;
                        ref: string;
                    };
                    invitedBy: {
                        type: string;
                        ref: string;
                    };
                };
            };
            repoViewDetail: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    email: {
                        type: string;
                    };
                    relatedRecords: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    moderation: {
                        type: string;
                        ref: string;
                    };
                    invitedBy: {
                        type: string;
                        ref: string;
                    };
                    invites: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            repoRef: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                };
            };
            recordView: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    value: {
                        type: string;
                    };
                    blobCids: {
                        type: string;
                        items: {
                            type: string;
                            format: string;
                        };
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    moderation: {
                        type: string;
                        ref: string;
                    };
                    repo: {
                        type: string;
                        ref: string;
                    };
                };
            };
            recordViewDetail: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    value: {
                        type: string;
                    };
                    blobs: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    moderation: {
                        type: string;
                        ref: string;
                    };
                    repo: {
                        type: string;
                        ref: string;
                    };
                };
            };
            moderation: {
                type: string;
                required: never[];
                properties: {
                    currentAction: {
                        type: string;
                        ref: string;
                    };
                };
            };
            moderationDetail: {
                type: string;
                required: string[];
                properties: {
                    currentAction: {
                        type: string;
                        ref: string;
                    };
                    actions: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    reports: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            blobView: {
                type: string;
                required: string[];
                properties: {
                    cid: {
                        type: string;
                        format: string;
                    };
                    mimeType: {
                        type: string;
                    };
                    size: {
                        type: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    details: {
                        type: string;
                        refs: string[];
                    };
                    moderation: {
                        type: string;
                        ref: string;
                    };
                };
            };
            imageDetails: {
                type: string;
                required: string[];
                properties: {
                    width: {
                        type: string;
                    };
                    height: {
                        type: string;
                    };
                };
            };
            videoDetails: {
                type: string;
                required: string[];
                properties: {
                    width: {
                        type: string;
                    };
                    height: {
                        type: string;
                    };
                    length: {
                        type: string;
                    };
                };
            };
        };
    };
    ComAtprotoAdminDisableInviteCodes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        properties: {
                            codes: {
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                            accounts: {
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminGetInviteCodes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        sort: {
                            type: string;
                            knownValues: string[];
                            default: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            codes: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminGetModerationAction: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        id: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    ComAtprotoAdminGetModerationActions: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        subject: {
                            type: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            actions: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminGetModerationReport: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        id: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    ComAtprotoAdminGetModerationReports: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        subject: {
                            type: string;
                        };
                        resolved: {
                            type: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            reports: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminGetRecord: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        uri: {
                            type: string;
                            format: string;
                        };
                        cid: {
                            type: string;
                            format: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    ComAtprotoAdminGetRepo: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    ComAtprotoAdminResolveModerationReports: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            actionId: {
                                type: string;
                            };
                            reportIds: {
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                            createdBy: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    ComAtprotoAdminReverseModerationAction: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            id: {
                                type: string;
                            };
                            reason: {
                                type: string;
                            };
                            createdBy: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    ComAtprotoAdminSearchRepos: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        term: {
                            type: string;
                        };
                        invitedBy: {
                            type: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            repos: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminTakeModerationAction: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            action: {
                                type: string;
                                knownValues: string[];
                            };
                            subject: {
                                type: string;
                                refs: string[];
                            };
                            subjectBlobCids: {
                                type: string;
                                items: {
                                    type: string;
                                    format: string;
                                };
                            };
                            createLabelVals: {
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                            negateLabelVals: {
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                            reason: {
                                type: string;
                            };
                            createdBy: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoAdminUpdateAccountHandle: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            did: {
                                type: string;
                                format: string;
                            };
                            handle: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoIdentityResolveHandle: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        handle: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            did: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoIdentityUpdateHandle: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            handle: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoLabelDefs: {
        lexicon: number;
        id: string;
        defs: {
            label: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    src: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    uri: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    val: {
                        type: string;
                        maxLength: number;
                        description: string;
                    };
                    neg: {
                        type: string;
                        description: string;
                    };
                    cts: {
                        type: string;
                        format: string;
                        description: string;
                    };
                };
            };
        };
    };
    ComAtprotoLabelQueryLabels: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        uriPatterns: {
                            type: string;
                            items: {
                                type: string;
                            };
                            description: string;
                        };
                        sources: {
                            type: string;
                            items: {
                                type: string;
                                format: string;
                            };
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            labels: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoLabelSubscribeLabels: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        cursor: {
                            type: string;
                            description: string;
                        };
                    };
                };
                message: {
                    schema: {
                        type: string;
                        refs: string[];
                    };
                };
                errors: {
                    name: string;
                }[];
            };
            labels: {
                type: string;
                required: string[];
                properties: {
                    seq: {
                        type: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            info: {
                type: string;
                required: string[];
                properties: {
                    name: {
                        type: string;
                        knownValues: string[];
                    };
                    message: {
                        type: string;
                    };
                };
            };
        };
    };
    ComAtprotoModerationCreateReport: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            reasonType: {
                                type: string;
                                ref: string;
                            };
                            reason: {
                                type: string;
                            };
                            subject: {
                                type: string;
                                refs: string[];
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            id: {
                                type: string;
                            };
                            reasonType: {
                                type: string;
                                ref: string;
                            };
                            reason: {
                                type: string;
                            };
                            subject: {
                                type: string;
                                refs: string[];
                            };
                            reportedBy: {
                                type: string;
                                format: string;
                            };
                            createdAt: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoModerationDefs: {
        lexicon: number;
        id: string;
        defs: {
            reasonType: {
                type: string;
                knownValues: string[];
            };
            reasonSpam: {
                type: string;
                description: string;
            };
            reasonOther: {
                type: string;
                description: string;
            };
        };
    };
    ComAtprotoRepoApplyWrites: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            repo: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            validate: {
                                type: string;
                                default: boolean;
                                description: string;
                            };
                            writes: {
                                type: string;
                                items: {
                                    type: string;
                                    refs: string[];
                                    closed: boolean;
                                };
                            };
                            swapCommit: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
            create: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    collection: {
                        type: string;
                        format: string;
                    };
                    rkey: {
                        type: string;
                    };
                    value: {
                        type: string;
                    };
                };
            };
            update: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    collection: {
                        type: string;
                        format: string;
                    };
                    rkey: {
                        type: string;
                    };
                    value: {
                        type: string;
                    };
                };
            };
            delete: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    collection: {
                        type: string;
                        format: string;
                    };
                    rkey: {
                        type: string;
                    };
                };
            };
        };
    };
    ComAtprotoRepoCreateRecord: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            repo: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            collection: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            rkey: {
                                type: string;
                                description: string;
                            };
                            validate: {
                                type: string;
                                default: boolean;
                                description: string;
                            };
                            record: {
                                type: string;
                                description: string;
                            };
                            swapCommit: {
                                type: string;
                                format: string;
                                description: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            uri: {
                                type: string;
                                format: string;
                            };
                            cid: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoRepoDeleteRecord: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            repo: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            collection: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            rkey: {
                                type: string;
                                description: string;
                            };
                            swapRecord: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            swapCommit: {
                                type: string;
                                format: string;
                                description: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoRepoDescribeRepo: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        repo: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            handle: {
                                type: string;
                                format: string;
                            };
                            did: {
                                type: string;
                                format: string;
                            };
                            didDoc: {
                                type: string;
                            };
                            collections: {
                                type: string;
                                items: {
                                    type: string;
                                    format: string;
                                };
                            };
                            handleIsCorrect: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoRepoGetRecord: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        repo: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        collection: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        rkey: {
                            type: string;
                            description: string;
                        };
                        cid: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            uri: {
                                type: string;
                                format: string;
                            };
                            cid: {
                                type: string;
                                format: string;
                            };
                            value: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoRepoListRecords: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        repo: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        collection: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                            description: string;
                        };
                        cursor: {
                            type: string;
                        };
                        rkeyStart: {
                            type: string;
                            description: string;
                        };
                        rkeyEnd: {
                            type: string;
                            description: string;
                        };
                        reverse: {
                            type: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            records: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
            record: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    value: {
                        type: string;
                    };
                };
            };
        };
    };
    ComAtprotoRepoPutRecord: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        nullable: string[];
                        properties: {
                            repo: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            collection: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            rkey: {
                                type: string;
                                description: string;
                            };
                            validate: {
                                type: string;
                                default: boolean;
                                description: string;
                            };
                            record: {
                                type: string;
                                description: string;
                            };
                            swapRecord: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            swapCommit: {
                                type: string;
                                format: string;
                                description: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            uri: {
                                type: string;
                                format: string;
                            };
                            cid: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoRepoStrongRef: {
        lexicon: number;
        id: string;
        description: string;
        defs: {
            main: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    ComAtprotoRepoUploadBlob: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            blob: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerCreateAccount: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            email: {
                                type: string;
                            };
                            handle: {
                                type: string;
                                format: string;
                            };
                            inviteCode: {
                                type: string;
                            };
                            password: {
                                type: string;
                            };
                            recoveryKey: {
                                type: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            accessJwt: {
                                type: string;
                            };
                            refreshJwt: {
                                type: string;
                            };
                            handle: {
                                type: string;
                                format: string;
                            };
                            did: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoServerCreateInviteCode: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            useCount: {
                                type: string;
                            };
                            forAccount: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            code: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerCreateInviteCodes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            codeCount: {
                                type: string;
                                default: number;
                            };
                            useCount: {
                                type: string;
                            };
                            forAccount: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            codes: {
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerCreateSession: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            identifier: {
                                type: string;
                                description: string;
                            };
                            password: {
                                type: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            accessJwt: {
                                type: string;
                            };
                            refreshJwt: {
                                type: string;
                            };
                            handle: {
                                type: string;
                                format: string;
                            };
                            did: {
                                type: string;
                                format: string;
                            };
                            email: {
                                type: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoServerDefs: {
        lexicon: number;
        id: string;
        defs: {
            inviteCode: {
                type: string;
                required: string[];
                properties: {
                    code: {
                        type: string;
                    };
                    available: {
                        type: string;
                    };
                    disabled: {
                        type: string;
                    };
                    forAccount: {
                        type: string;
                    };
                    createdBy: {
                        type: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    uses: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            inviteCodeUse: {
                type: string;
                required: string[];
                properties: {
                    usedBy: {
                        type: string;
                        format: string;
                    };
                    usedAt: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    ComAtprotoServerDeleteAccount: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            did: {
                                type: string;
                                format: string;
                            };
                            password: {
                                type: string;
                            };
                            token: {
                                type: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoServerDeleteSession: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
            };
        };
    };
    ComAtprotoServerDescribeServer: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            inviteCodeRequired: {
                                type: string;
                            };
                            availableUserDomains: {
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                            links: {
                                type: string;
                                ref: string;
                            };
                        };
                    };
                };
            };
            links: {
                type: string;
                properties: {
                    privacyPolicy: {
                        type: string;
                    };
                    termsOfService: {
                        type: string;
                    };
                };
            };
        };
    };
    ComAtprotoServerGetAccountInviteCodes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        includeUsed: {
                            type: string;
                            default: boolean;
                        };
                        createAvailable: {
                            type: string;
                            default: boolean;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            codes: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoServerGetSession: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            handle: {
                                type: string;
                                format: string;
                            };
                            did: {
                                type: string;
                                format: string;
                            };
                            email: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerRefreshSession: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            accessJwt: {
                                type: string;
                            };
                            refreshJwt: {
                                type: string;
                            };
                            handle: {
                                type: string;
                                format: string;
                            };
                            did: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoServerRequestAccountDelete: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
            };
        };
    };
    ComAtprotoServerRequestPasswordReset: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            email: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerResetPassword: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            token: {
                                type: string;
                            };
                            password: {
                                type: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoSyncGetBlob: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        cid: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                };
            };
        };
    };
    ComAtprotoSyncGetBlocks: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        cids: {
                            type: string;
                            items: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                };
            };
        };
    };
    ComAtprotoSyncGetCheckout: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        commit: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                };
            };
        };
    };
    ComAtprotoSyncGetCommitPath: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        latest: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        earliest: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            commits: {
                                type: string;
                                items: {
                                    type: string;
                                    format: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoSyncGetHead: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            root: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoSyncGetRecord: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        collection: {
                            type: string;
                            format: string;
                        };
                        rkey: {
                            type: string;
                        };
                        commit: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                };
            };
        };
    };
    ComAtprotoSyncGetRepo: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        earliest: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        latest: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                };
            };
        };
    };
    ComAtprotoSyncListBlobs: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        latest: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        earliest: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cids: {
                                type: string;
                                items: {
                                    type: string;
                                    format: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoSyncListRepos: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            repos: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
            repo: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    head: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    ComAtprotoSyncNotifyOfUpdate: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        hostname: {
                            type: string;
                            description: string;
                        };
                    };
                };
            };
        };
    };
    ComAtprotoSyncRequestCrawl: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        hostname: {
                            type: string;
                            description: string;
                        };
                    };
                };
            };
        };
    };
    ComAtprotoSyncSubscribeRepos: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        cursor: {
                            type: string;
                            description: string;
                        };
                    };
                };
                message: {
                    schema: {
                        type: string;
                        refs: string[];
                    };
                };
                errors: {
                    name: string;
                }[];
            };
            commit: {
                type: string;
                required: string[];
                nullable: string[];
                properties: {
                    seq: {
                        type: string;
                    };
                    rebase: {
                        type: string;
                    };
                    tooBig: {
                        type: string;
                    };
                    repo: {
                        type: string;
                        format: string;
                    };
                    commit: {
                        type: string;
                    };
                    prev: {
                        type: string;
                    };
                    blocks: {
                        type: string;
                        description: string;
                        maxLength: number;
                    };
                    ops: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                        maxLength: number;
                    };
                    blobs: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    time: {
                        type: string;
                        format: string;
                    };
                };
            };
            handle: {
                type: string;
                required: string[];
                properties: {
                    seq: {
                        type: string;
                    };
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    time: {
                        type: string;
                        format: string;
                    };
                };
            };
            migrate: {
                type: string;
                required: string[];
                nullable: string[];
                properties: {
                    seq: {
                        type: string;
                    };
                    did: {
                        type: string;
                        format: string;
                    };
                    migrateTo: {
                        type: string;
                    };
                    time: {
                        type: string;
                        format: string;
                    };
                };
            };
            tombstone: {
                type: string;
                required: string[];
                properties: {
                    seq: {
                        type: string;
                    };
                    did: {
                        type: string;
                        format: string;
                    };
                    time: {
                        type: string;
                        format: string;
                    };
                };
            };
            info: {
                type: string;
                required: string[];
                properties: {
                    name: {
                        type: string;
                        knownValues: string[];
                    };
                    message: {
                        type: string;
                    };
                };
            };
            repoOp: {
                type: string;
                required: string[];
                nullable: string[];
                properties: {
                    action: {
                        type: string;
                        knownValues: string[];
                    };
                    path: {
                        type: string;
                    };
                    cid: {
                        type: string;
                    };
                };
            };
        };
    };
    AppBskyActorDefs: {
        lexicon: number;
        id: string;
        description: string;
        defs: {
            profileViewBasic: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    displayName: {
                        type: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    avatar: {
                        type: string;
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            profileView: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    displayName: {
                        type: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    description: {
                        type: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    avatar: {
                        type: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            profileViewDetailed: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    displayName: {
                        type: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    description: {
                        type: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    avatar: {
                        type: string;
                    };
                    banner: {
                        type: string;
                    };
                    followersCount: {
                        type: string;
                    };
                    followsCount: {
                        type: string;
                    };
                    postsCount: {
                        type: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            viewerState: {
                type: string;
                properties: {
                    muted: {
                        type: string;
                    };
                    following: {
                        type: string;
                        format: string;
                    };
                    followedBy: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    AppBskyActorGetProfile: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    AppBskyActorGetProfiles: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actors: {
                            type: string;
                            items: {
                                type: string;
                                format: string;
                            };
                            maxLength: number;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            profiles: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyActorGetSuggestions: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            actors: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyActorProfile: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                key: string;
                record: {
                    type: string;
                    properties: {
                        displayName: {
                            type: string;
                            maxGraphemes: number;
                            maxLength: number;
                        };
                        description: {
                            type: string;
                            maxGraphemes: number;
                            maxLength: number;
                        };
                        avatar: {
                            type: string;
                            accept: string[];
                            maxSize: number;
                        };
                        banner: {
                            type: string;
                            accept: string[];
                            maxSize: number;
                        };
                    };
                };
            };
        };
    };
    AppBskyActorSearchActors: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        term: {
                            type: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            actors: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyActorSearchActorsTypeahead: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        term: {
                            type: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            actors: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyEmbedExternal: {
        lexicon: number;
        id: string;
        description: string;
        defs: {
            main: {
                type: string;
                required: string[];
                properties: {
                    external: {
                        type: string;
                        ref: string;
                    };
                };
            };
            external: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    title: {
                        type: string;
                    };
                    description: {
                        type: string;
                    };
                    thumb: {
                        type: string;
                        accept: string[];
                        maxSize: number;
                    };
                };
            };
            view: {
                type: string;
                required: string[];
                properties: {
                    external: {
                        type: string;
                        ref: string;
                    };
                };
            };
            viewExternal: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    title: {
                        type: string;
                    };
                    description: {
                        type: string;
                    };
                    thumb: {
                        type: string;
                    };
                };
            };
        };
    };
    AppBskyEmbedImages: {
        lexicon: number;
        id: string;
        description: string;
        defs: {
            main: {
                type: string;
                required: string[];
                properties: {
                    images: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                        maxLength: number;
                    };
                };
            };
            image: {
                type: string;
                required: string[];
                properties: {
                    image: {
                        type: string;
                        accept: string[];
                        maxSize: number;
                    };
                    alt: {
                        type: string;
                    };
                };
            };
            view: {
                type: string;
                required: string[];
                properties: {
                    images: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                        maxLength: number;
                    };
                };
            };
            viewImage: {
                type: string;
                required: string[];
                properties: {
                    thumb: {
                        type: string;
                    };
                    fullsize: {
                        type: string;
                    };
                    alt: {
                        type: string;
                    };
                };
            };
        };
    };
    AppBskyEmbedRecord: {
        lexicon: number;
        id: string;
        description: string;
        defs: {
            main: {
                type: string;
                required: string[];
                properties: {
                    record: {
                        type: string;
                        ref: string;
                    };
                };
            };
            view: {
                type: string;
                required: string[];
                properties: {
                    record: {
                        type: string;
                        refs: string[];
                    };
                };
            };
            viewRecord: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    author: {
                        type: string;
                        ref: string;
                    };
                    value: {
                        type: string;
                    };
                    embeds: {
                        type: string;
                        items: {
                            type: string;
                            refs: string[];
                        };
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                };
            };
            viewNotFound: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    AppBskyEmbedRecordWithMedia: {
        lexicon: number;
        id: string;
        description: string;
        defs: {
            main: {
                type: string;
                required: string[];
                properties: {
                    record: {
                        type: string;
                        ref: string;
                    };
                    media: {
                        type: string;
                        refs: string[];
                    };
                };
            };
            view: {
                type: string;
                required: string[];
                properties: {
                    record: {
                        type: string;
                        ref: string;
                    };
                    media: {
                        type: string;
                        refs: string[];
                    };
                };
            };
        };
    };
    AppBskyFeedDefs: {
        lexicon: number;
        id: string;
        defs: {
            postView: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    author: {
                        type: string;
                        ref: string;
                    };
                    record: {
                        type: string;
                    };
                    embed: {
                        type: string;
                        refs: string[];
                    };
                    replyCount: {
                        type: string;
                    };
                    repostCount: {
                        type: string;
                    };
                    likeCount: {
                        type: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            viewerState: {
                type: string;
                properties: {
                    repost: {
                        type: string;
                        format: string;
                    };
                    like: {
                        type: string;
                        format: string;
                    };
                };
            };
            feedViewPost: {
                type: string;
                required: string[];
                properties: {
                    post: {
                        type: string;
                        ref: string;
                    };
                    reply: {
                        type: string;
                        ref: string;
                    };
                    reason: {
                        type: string;
                        refs: string[];
                    };
                };
            };
            replyRef: {
                type: string;
                required: string[];
                properties: {
                    root: {
                        type: string;
                        ref: string;
                    };
                    parent: {
                        type: string;
                        ref: string;
                    };
                };
            };
            reasonRepost: {
                type: string;
                required: string[];
                properties: {
                    by: {
                        type: string;
                        ref: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                };
            };
            threadViewPost: {
                type: string;
                required: string[];
                properties: {
                    post: {
                        type: string;
                        ref: string;
                    };
                    parent: {
                        type: string;
                        refs: string[];
                    };
                    replies: {
                        type: string;
                        items: {
                            type: string;
                            refs: string[];
                        };
                    };
                };
            };
            notFoundPost: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    notFound: {
                        type: string;
                        const: boolean;
                    };
                };
            };
        };
    };
    AppBskyFeedGetAuthorFeed: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            feed: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedGetLikes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        uri: {
                            type: string;
                            format: string;
                        };
                        cid: {
                            type: string;
                            format: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            uri: {
                                type: string;
                                format: string;
                            };
                            cid: {
                                type: string;
                                format: string;
                            };
                            cursor: {
                                type: string;
                            };
                            likes: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
            like: {
                type: string;
                required: string[];
                properties: {
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    actor: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    AppBskyFeedGetPostThread: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        uri: {
                            type: string;
                            format: string;
                        };
                        depth: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            thread: {
                                type: string;
                                refs: string[];
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    AppBskyFeedGetRepostedBy: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        uri: {
                            type: string;
                            format: string;
                        };
                        cid: {
                            type: string;
                            format: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            uri: {
                                type: string;
                                format: string;
                            };
                            cid: {
                                type: string;
                                format: string;
                            };
                            cursor: {
                                type: string;
                            };
                            repostedBy: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedGetTimeline: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        algorithm: {
                            type: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            feed: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedLike: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        subject: {
                            type: string;
                            ref: string;
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedPost: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        text: {
                            type: string;
                            maxLength: number;
                            maxGraphemes: number;
                        };
                        entities: {
                            type: string;
                            description: string;
                            items: {
                                type: string;
                                ref: string;
                            };
                        };
                        facets: {
                            type: string;
                            items: {
                                type: string;
                                ref: string;
                            };
                        };
                        reply: {
                            type: string;
                            ref: string;
                        };
                        embed: {
                            type: string;
                            refs: string[];
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
            replyRef: {
                type: string;
                required: string[];
                properties: {
                    root: {
                        type: string;
                        ref: string;
                    };
                    parent: {
                        type: string;
                        ref: string;
                    };
                };
            };
            entity: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    index: {
                        type: string;
                        ref: string;
                    };
                    type: {
                        type: string;
                        description: string;
                    };
                    value: {
                        type: string;
                    };
                };
            };
            textSlice: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    start: {
                        type: string;
                        minimum: number;
                    };
                    end: {
                        type: string;
                        minimum: number;
                    };
                };
            };
        };
    };
    AppBskyFeedRepost: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        subject: {
                            type: string;
                            ref: string;
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphFollow: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        subject: {
                            type: string;
                            format: string;
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphGetFollowers: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            subject: {
                                type: string;
                                ref: string;
                            };
                            cursor: {
                                type: string;
                            };
                            followers: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphGetFollows: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            subject: {
                                type: string;
                                ref: string;
                            };
                            cursor: {
                                type: string;
                            };
                            follows: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphGetMutes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            mutes: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphMuteActor: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            actor: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphUnmuteActor: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            actor: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyNotificationGetUnreadCount: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            count: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyNotificationListNotifications: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            notifications: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
            notification: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    author: {
                        type: string;
                        ref: string;
                    };
                    reason: {
                        type: string;
                        description: string;
                        knownValues: string[];
                    };
                    reasonSubject: {
                        type: string;
                        format: string;
                    };
                    record: {
                        type: string;
                    };
                    isRead: {
                        type: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyNotificationUpdateSeen: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            seenAt: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyRichtextFacet: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                required: string[];
                properties: {
                    index: {
                        type: string;
                        ref: string;
                    };
                    features: {
                        type: string;
                        items: {
                            type: string;
                            refs: string[];
                        };
                    };
                };
            };
            mention: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                };
            };
            link: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                };
            };
            byteSlice: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    byteStart: {
                        type: string;
                        minimum: number;
                    };
                    byteEnd: {
                        type: string;
                        minimum: number;
                    };
                };
            };
        };
    };
    AppBskyUnspeccedGetPopular: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            feed: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
export declare const schemas: LexiconDoc[];
export declare const lexicons: Lexicons;
export declare const ids: {
    ComAtprotoAdminDefs: string;
    ComAtprotoAdminDisableInviteCodes: string;
    ComAtprotoAdminGetInviteCodes: string;
    ComAtprotoAdminGetModerationAction: string;
    ComAtprotoAdminGetModerationActions: string;
    ComAtprotoAdminGetModerationReport: string;
    ComAtprotoAdminGetModerationReports: string;
    ComAtprotoAdminGetRecord: string;
    ComAtprotoAdminGetRepo: string;
    ComAtprotoAdminResolveModerationReports: string;
    ComAtprotoAdminReverseModerationAction: string;
    ComAtprotoAdminSearchRepos: string;
    ComAtprotoAdminTakeModerationAction: string;
    ComAtprotoAdminUpdateAccountHandle: string;
    ComAtprotoIdentityResolveHandle: string;
    ComAtprotoIdentityUpdateHandle: string;
    ComAtprotoLabelDefs: string;
    ComAtprotoLabelQueryLabels: string;
    ComAtprotoLabelSubscribeLabels: string;
    ComAtprotoModerationCreateReport: string;
    ComAtprotoModerationDefs: string;
    ComAtprotoRepoApplyWrites: string;
    ComAtprotoRepoCreateRecord: string;
    ComAtprotoRepoDeleteRecord: string;
    ComAtprotoRepoDescribeRepo: string;
    ComAtprotoRepoGetRecord: string;
    ComAtprotoRepoListRecords: string;
    ComAtprotoRepoPutRecord: string;
    ComAtprotoRepoStrongRef: string;
    ComAtprotoRepoUploadBlob: string;
    ComAtprotoServerCreateAccount: string;
    ComAtprotoServerCreateInviteCode: string;
    ComAtprotoServerCreateInviteCodes: string;
    ComAtprotoServerCreateSession: string;
    ComAtprotoServerDefs: string;
    ComAtprotoServerDeleteAccount: string;
    ComAtprotoServerDeleteSession: string;
    ComAtprotoServerDescribeServer: string;
    ComAtprotoServerGetAccountInviteCodes: string;
    ComAtprotoServerGetSession: string;
    ComAtprotoServerRefreshSession: string;
    ComAtprotoServerRequestAccountDelete: string;
    ComAtprotoServerRequestPasswordReset: string;
    ComAtprotoServerResetPassword: string;
    ComAtprotoSyncGetBlob: string;
    ComAtprotoSyncGetBlocks: string;
    ComAtprotoSyncGetCheckout: string;
    ComAtprotoSyncGetCommitPath: string;
    ComAtprotoSyncGetHead: string;
    ComAtprotoSyncGetRecord: string;
    ComAtprotoSyncGetRepo: string;
    ComAtprotoSyncListBlobs: string;
    ComAtprotoSyncListRepos: string;
    ComAtprotoSyncNotifyOfUpdate: string;
    ComAtprotoSyncRequestCrawl: string;
    ComAtprotoSyncSubscribeRepos: string;
    AppBskyActorDefs: string;
    AppBskyActorGetProfile: string;
    AppBskyActorGetProfiles: string;
    AppBskyActorGetSuggestions: string;
    AppBskyActorProfile: string;
    AppBskyActorSearchActors: string;
    AppBskyActorSearchActorsTypeahead: string;
    AppBskyEmbedExternal: string;
    AppBskyEmbedImages: string;
    AppBskyEmbedRecord: string;
    AppBskyEmbedRecordWithMedia: string;
    AppBskyFeedDefs: string;
    AppBskyFeedGetAuthorFeed: string;
    AppBskyFeedGetLikes: string;
    AppBskyFeedGetPostThread: string;
    AppBskyFeedGetRepostedBy: string;
    AppBskyFeedGetTimeline: string;
    AppBskyFeedLike: string;
    AppBskyFeedPost: string;
    AppBskyFeedRepost: string;
    AppBskyGraphFollow: string;
    AppBskyGraphGetFollowers: string;
    AppBskyGraphGetFollows: string;
    AppBskyGraphGetMutes: string;
    AppBskyGraphMuteActor: string;
    AppBskyGraphUnmuteActor: string;
    AppBskyNotificationGetUnreadCount: string;
    AppBskyNotificationListNotifications: string;
    AppBskyNotificationUpdateSeen: string;
    AppBskyRichtextFacet: string;
    AppBskyUnspeccedGetPopular: string;
};
