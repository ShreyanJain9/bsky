import { Client as XrpcClient, ServiceClient as XrpcServiceClient } from '@atproto/xrpc';
import * as ComAtprotoAdminDisableInviteCodes from './types/com/atproto/admin/disableInviteCodes';
import * as ComAtprotoAdminGetInviteCodes from './types/com/atproto/admin/getInviteCodes';
import * as ComAtprotoAdminGetModerationAction from './types/com/atproto/admin/getModerationAction';
import * as ComAtprotoAdminGetModerationActions from './types/com/atproto/admin/getModerationActions';
import * as ComAtprotoAdminGetModerationReport from './types/com/atproto/admin/getModerationReport';
import * as ComAtprotoAdminGetModerationReports from './types/com/atproto/admin/getModerationReports';
import * as ComAtprotoAdminGetRecord from './types/com/atproto/admin/getRecord';
import * as ComAtprotoAdminGetRepo from './types/com/atproto/admin/getRepo';
import * as ComAtprotoAdminResolveModerationReports from './types/com/atproto/admin/resolveModerationReports';
import * as ComAtprotoAdminReverseModerationAction from './types/com/atproto/admin/reverseModerationAction';
import * as ComAtprotoAdminSearchRepos from './types/com/atproto/admin/searchRepos';
import * as ComAtprotoAdminTakeModerationAction from './types/com/atproto/admin/takeModerationAction';
import * as ComAtprotoAdminUpdateAccountHandle from './types/com/atproto/admin/updateAccountHandle';
import * as ComAtprotoIdentityResolveHandle from './types/com/atproto/identity/resolveHandle';
import * as ComAtprotoIdentityUpdateHandle from './types/com/atproto/identity/updateHandle';
import * as ComAtprotoLabelQueryLabels from './types/com/atproto/label/queryLabels';
import * as ComAtprotoModerationCreateReport from './types/com/atproto/moderation/createReport';
import * as ComAtprotoRepoApplyWrites from './types/com/atproto/repo/applyWrites';
import * as ComAtprotoRepoCreateRecord from './types/com/atproto/repo/createRecord';
import * as ComAtprotoRepoDeleteRecord from './types/com/atproto/repo/deleteRecord';
import * as ComAtprotoRepoDescribeRepo from './types/com/atproto/repo/describeRepo';
import * as ComAtprotoRepoGetRecord from './types/com/atproto/repo/getRecord';
import * as ComAtprotoRepoListRecords from './types/com/atproto/repo/listRecords';
import * as ComAtprotoRepoPutRecord from './types/com/atproto/repo/putRecord';
import * as ComAtprotoRepoUploadBlob from './types/com/atproto/repo/uploadBlob';
import * as ComAtprotoServerCreateAccount from './types/com/atproto/server/createAccount';
import * as ComAtprotoServerCreateInviteCode from './types/com/atproto/server/createInviteCode';
import * as ComAtprotoServerCreateInviteCodes from './types/com/atproto/server/createInviteCodes';
import * as ComAtprotoServerCreateSession from './types/com/atproto/server/createSession';
import * as ComAtprotoServerDeleteAccount from './types/com/atproto/server/deleteAccount';
import * as ComAtprotoServerDeleteSession from './types/com/atproto/server/deleteSession';
import * as ComAtprotoServerDescribeServer from './types/com/atproto/server/describeServer';
import * as ComAtprotoServerGetAccountInviteCodes from './types/com/atproto/server/getAccountInviteCodes';
import * as ComAtprotoServerGetSession from './types/com/atproto/server/getSession';
import * as ComAtprotoServerRefreshSession from './types/com/atproto/server/refreshSession';
import * as ComAtprotoServerRequestAccountDelete from './types/com/atproto/server/requestAccountDelete';
import * as ComAtprotoServerRequestPasswordReset from './types/com/atproto/server/requestPasswordReset';
import * as ComAtprotoServerResetPassword from './types/com/atproto/server/resetPassword';
import * as ComAtprotoSyncGetBlob from './types/com/atproto/sync/getBlob';
import * as ComAtprotoSyncGetBlocks from './types/com/atproto/sync/getBlocks';
import * as ComAtprotoSyncGetCheckout from './types/com/atproto/sync/getCheckout';
import * as ComAtprotoSyncGetCommitPath from './types/com/atproto/sync/getCommitPath';
import * as ComAtprotoSyncGetHead from './types/com/atproto/sync/getHead';
import * as ComAtprotoSyncGetRecord from './types/com/atproto/sync/getRecord';
import * as ComAtprotoSyncGetRepo from './types/com/atproto/sync/getRepo';
import * as ComAtprotoSyncListBlobs from './types/com/atproto/sync/listBlobs';
import * as ComAtprotoSyncListRepos from './types/com/atproto/sync/listRepos';
import * as ComAtprotoSyncNotifyOfUpdate from './types/com/atproto/sync/notifyOfUpdate';
import * as ComAtprotoSyncRequestCrawl from './types/com/atproto/sync/requestCrawl';
import * as AppBskyActorGetProfile from './types/app/bsky/actor/getProfile';
import * as AppBskyActorGetProfiles from './types/app/bsky/actor/getProfiles';
import * as AppBskyActorGetSuggestions from './types/app/bsky/actor/getSuggestions';
import * as AppBskyActorProfile from './types/app/bsky/actor/profile';
import * as AppBskyActorSearchActors from './types/app/bsky/actor/searchActors';
import * as AppBskyActorSearchActorsTypeahead from './types/app/bsky/actor/searchActorsTypeahead';
import * as AppBskyFeedGetAuthorFeed from './types/app/bsky/feed/getAuthorFeed';
import * as AppBskyFeedGetLikes from './types/app/bsky/feed/getLikes';
import * as AppBskyFeedGetPostThread from './types/app/bsky/feed/getPostThread';
import * as AppBskyFeedGetRepostedBy from './types/app/bsky/feed/getRepostedBy';
import * as AppBskyFeedGetTimeline from './types/app/bsky/feed/getTimeline';
import * as AppBskyFeedLike from './types/app/bsky/feed/like';
import * as AppBskyFeedPost from './types/app/bsky/feed/post';
import * as AppBskyFeedRepost from './types/app/bsky/feed/repost';
import * as AppBskyGraphFollow from './types/app/bsky/graph/follow';
import * as AppBskyGraphGetFollowers from './types/app/bsky/graph/getFollowers';
import * as AppBskyGraphGetFollows from './types/app/bsky/graph/getFollows';
import * as AppBskyGraphGetMutes from './types/app/bsky/graph/getMutes';
import * as AppBskyGraphMuteActor from './types/app/bsky/graph/muteActor';
import * as AppBskyGraphUnmuteActor from './types/app/bsky/graph/unmuteActor';
import * as AppBskyNotificationGetUnreadCount from './types/app/bsky/notification/getUnreadCount';
import * as AppBskyNotificationListNotifications from './types/app/bsky/notification/listNotifications';
import * as AppBskyNotificationUpdateSeen from './types/app/bsky/notification/updateSeen';
import * as AppBskyUnspeccedGetPopular from './types/app/bsky/unspecced/getPopular';
export * as ComAtprotoAdminDefs from './types/com/atproto/admin/defs';
export * as ComAtprotoAdminDisableInviteCodes from './types/com/atproto/admin/disableInviteCodes';
export * as ComAtprotoAdminGetInviteCodes from './types/com/atproto/admin/getInviteCodes';
export * as ComAtprotoAdminGetModerationAction from './types/com/atproto/admin/getModerationAction';
export * as ComAtprotoAdminGetModerationActions from './types/com/atproto/admin/getModerationActions';
export * as ComAtprotoAdminGetModerationReport from './types/com/atproto/admin/getModerationReport';
export * as ComAtprotoAdminGetModerationReports from './types/com/atproto/admin/getModerationReports';
export * as ComAtprotoAdminGetRecord from './types/com/atproto/admin/getRecord';
export * as ComAtprotoAdminGetRepo from './types/com/atproto/admin/getRepo';
export * as ComAtprotoAdminResolveModerationReports from './types/com/atproto/admin/resolveModerationReports';
export * as ComAtprotoAdminReverseModerationAction from './types/com/atproto/admin/reverseModerationAction';
export * as ComAtprotoAdminSearchRepos from './types/com/atproto/admin/searchRepos';
export * as ComAtprotoAdminTakeModerationAction from './types/com/atproto/admin/takeModerationAction';
export * as ComAtprotoAdminUpdateAccountHandle from './types/com/atproto/admin/updateAccountHandle';
export * as ComAtprotoIdentityResolveHandle from './types/com/atproto/identity/resolveHandle';
export * as ComAtprotoIdentityUpdateHandle from './types/com/atproto/identity/updateHandle';
export * as ComAtprotoLabelDefs from './types/com/atproto/label/defs';
export * as ComAtprotoLabelQueryLabels from './types/com/atproto/label/queryLabels';
export * as ComAtprotoLabelSubscribeLabels from './types/com/atproto/label/subscribeLabels';
export * as ComAtprotoModerationCreateReport from './types/com/atproto/moderation/createReport';
export * as ComAtprotoModerationDefs from './types/com/atproto/moderation/defs';
export * as ComAtprotoRepoApplyWrites from './types/com/atproto/repo/applyWrites';
export * as ComAtprotoRepoCreateRecord from './types/com/atproto/repo/createRecord';
export * as ComAtprotoRepoDeleteRecord from './types/com/atproto/repo/deleteRecord';
export * as ComAtprotoRepoDescribeRepo from './types/com/atproto/repo/describeRepo';
export * as ComAtprotoRepoGetRecord from './types/com/atproto/repo/getRecord';
export * as ComAtprotoRepoListRecords from './types/com/atproto/repo/listRecords';
export * as ComAtprotoRepoPutRecord from './types/com/atproto/repo/putRecord';
export * as ComAtprotoRepoStrongRef from './types/com/atproto/repo/strongRef';
export * as ComAtprotoRepoUploadBlob from './types/com/atproto/repo/uploadBlob';
export * as ComAtprotoServerCreateAccount from './types/com/atproto/server/createAccount';
export * as ComAtprotoServerCreateInviteCode from './types/com/atproto/server/createInviteCode';
export * as ComAtprotoServerCreateInviteCodes from './types/com/atproto/server/createInviteCodes';
export * as ComAtprotoServerCreateSession from './types/com/atproto/server/createSession';
export * as ComAtprotoServerDefs from './types/com/atproto/server/defs';
export * as ComAtprotoServerDeleteAccount from './types/com/atproto/server/deleteAccount';
export * as ComAtprotoServerDeleteSession from './types/com/atproto/server/deleteSession';
export * as ComAtprotoServerDescribeServer from './types/com/atproto/server/describeServer';
export * as ComAtprotoServerGetAccountInviteCodes from './types/com/atproto/server/getAccountInviteCodes';
export * as ComAtprotoServerGetSession from './types/com/atproto/server/getSession';
export * as ComAtprotoServerRefreshSession from './types/com/atproto/server/refreshSession';
export * as ComAtprotoServerRequestAccountDelete from './types/com/atproto/server/requestAccountDelete';
export * as ComAtprotoServerRequestPasswordReset from './types/com/atproto/server/requestPasswordReset';
export * as ComAtprotoServerResetPassword from './types/com/atproto/server/resetPassword';
export * as ComAtprotoSyncGetBlob from './types/com/atproto/sync/getBlob';
export * as ComAtprotoSyncGetBlocks from './types/com/atproto/sync/getBlocks';
export * as ComAtprotoSyncGetCheckout from './types/com/atproto/sync/getCheckout';
export * as ComAtprotoSyncGetCommitPath from './types/com/atproto/sync/getCommitPath';
export * as ComAtprotoSyncGetHead from './types/com/atproto/sync/getHead';
export * as ComAtprotoSyncGetRecord from './types/com/atproto/sync/getRecord';
export * as ComAtprotoSyncGetRepo from './types/com/atproto/sync/getRepo';
export * as ComAtprotoSyncListBlobs from './types/com/atproto/sync/listBlobs';
export * as ComAtprotoSyncListRepos from './types/com/atproto/sync/listRepos';
export * as ComAtprotoSyncNotifyOfUpdate from './types/com/atproto/sync/notifyOfUpdate';
export * as ComAtprotoSyncRequestCrawl from './types/com/atproto/sync/requestCrawl';
export * as ComAtprotoSyncSubscribeRepos from './types/com/atproto/sync/subscribeRepos';
export * as AppBskyActorDefs from './types/app/bsky/actor/defs';
export * as AppBskyActorGetProfile from './types/app/bsky/actor/getProfile';
export * as AppBskyActorGetProfiles from './types/app/bsky/actor/getProfiles';
export * as AppBskyActorGetSuggestions from './types/app/bsky/actor/getSuggestions';
export * as AppBskyActorProfile from './types/app/bsky/actor/profile';
export * as AppBskyActorSearchActors from './types/app/bsky/actor/searchActors';
export * as AppBskyActorSearchActorsTypeahead from './types/app/bsky/actor/searchActorsTypeahead';
export * as AppBskyEmbedExternal from './types/app/bsky/embed/external';
export * as AppBskyEmbedImages from './types/app/bsky/embed/images';
export * as AppBskyEmbedRecord from './types/app/bsky/embed/record';
export * as AppBskyEmbedRecordWithMedia from './types/app/bsky/embed/recordWithMedia';
export * as AppBskyFeedDefs from './types/app/bsky/feed/defs';
export * as AppBskyFeedGetAuthorFeed from './types/app/bsky/feed/getAuthorFeed';
export * as AppBskyFeedGetLikes from './types/app/bsky/feed/getLikes';
export * as AppBskyFeedGetPostThread from './types/app/bsky/feed/getPostThread';
export * as AppBskyFeedGetRepostedBy from './types/app/bsky/feed/getRepostedBy';
export * as AppBskyFeedGetTimeline from './types/app/bsky/feed/getTimeline';
export * as AppBskyFeedLike from './types/app/bsky/feed/like';
export * as AppBskyFeedPost from './types/app/bsky/feed/post';
export * as AppBskyFeedRepost from './types/app/bsky/feed/repost';
export * as AppBskyGraphFollow from './types/app/bsky/graph/follow';
export * as AppBskyGraphGetFollowers from './types/app/bsky/graph/getFollowers';
export * as AppBskyGraphGetFollows from './types/app/bsky/graph/getFollows';
export * as AppBskyGraphGetMutes from './types/app/bsky/graph/getMutes';
export * as AppBskyGraphMuteActor from './types/app/bsky/graph/muteActor';
export * as AppBskyGraphUnmuteActor from './types/app/bsky/graph/unmuteActor';
export * as AppBskyNotificationGetUnreadCount from './types/app/bsky/notification/getUnreadCount';
export * as AppBskyNotificationListNotifications from './types/app/bsky/notification/listNotifications';
export * as AppBskyNotificationUpdateSeen from './types/app/bsky/notification/updateSeen';
export * as AppBskyRichtextFacet from './types/app/bsky/richtext/facet';
export * as AppBskyUnspeccedGetPopular from './types/app/bsky/unspecced/getPopular';
export declare const COM_ATPROTO_ADMIN: {
    DefsTakedown: string;
    DefsFlag: string;
    DefsAcknowledge: string;
};
export declare const COM_ATPROTO_MODERATION: {
    DefsReasonSpam: string;
    DefsReasonOther: string;
};
export declare class AtpBaseClient {
    xrpc: XrpcClient;
    constructor();
    service(serviceUri: string | URL): AtpServiceClient;
}
export declare class AtpServiceClient {
    _baseClient: AtpBaseClient;
    xrpc: XrpcServiceClient;
    com: ComNS;
    app: AppNS;
    constructor(baseClient: AtpBaseClient, xrpcService: XrpcServiceClient);
    setHeader(key: string, value: string): void;
}
export declare class ComNS {
    _service: AtpServiceClient;
    atproto: AtprotoNS;
    constructor(service: AtpServiceClient);
}
export declare class AtprotoNS {
    _service: AtpServiceClient;
    admin: AdminNS;
    identity: IdentityNS;
    label: LabelNS;
    moderation: ModerationNS;
    repo: RepoNS;
    server: ServerNS;
    sync: SyncNS;
    constructor(service: AtpServiceClient);
}
export declare class AdminNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    disableInviteCodes(data?: ComAtprotoAdminDisableInviteCodes.InputSchema, opts?: ComAtprotoAdminDisableInviteCodes.CallOptions): Promise<ComAtprotoAdminDisableInviteCodes.Response>;
    getInviteCodes(params?: ComAtprotoAdminGetInviteCodes.QueryParams, opts?: ComAtprotoAdminGetInviteCodes.CallOptions): Promise<ComAtprotoAdminGetInviteCodes.Response>;
    getModerationAction(params?: ComAtprotoAdminGetModerationAction.QueryParams, opts?: ComAtprotoAdminGetModerationAction.CallOptions): Promise<ComAtprotoAdminGetModerationAction.Response>;
    getModerationActions(params?: ComAtprotoAdminGetModerationActions.QueryParams, opts?: ComAtprotoAdminGetModerationActions.CallOptions): Promise<ComAtprotoAdminGetModerationActions.Response>;
    getModerationReport(params?: ComAtprotoAdminGetModerationReport.QueryParams, opts?: ComAtprotoAdminGetModerationReport.CallOptions): Promise<ComAtprotoAdminGetModerationReport.Response>;
    getModerationReports(params?: ComAtprotoAdminGetModerationReports.QueryParams, opts?: ComAtprotoAdminGetModerationReports.CallOptions): Promise<ComAtprotoAdminGetModerationReports.Response>;
    getRecord(params?: ComAtprotoAdminGetRecord.QueryParams, opts?: ComAtprotoAdminGetRecord.CallOptions): Promise<ComAtprotoAdminGetRecord.Response>;
    getRepo(params?: ComAtprotoAdminGetRepo.QueryParams, opts?: ComAtprotoAdminGetRepo.CallOptions): Promise<ComAtprotoAdminGetRepo.Response>;
    resolveModerationReports(data?: ComAtprotoAdminResolveModerationReports.InputSchema, opts?: ComAtprotoAdminResolveModerationReports.CallOptions): Promise<ComAtprotoAdminResolveModerationReports.Response>;
    reverseModerationAction(data?: ComAtprotoAdminReverseModerationAction.InputSchema, opts?: ComAtprotoAdminReverseModerationAction.CallOptions): Promise<ComAtprotoAdminReverseModerationAction.Response>;
    searchRepos(params?: ComAtprotoAdminSearchRepos.QueryParams, opts?: ComAtprotoAdminSearchRepos.CallOptions): Promise<ComAtprotoAdminSearchRepos.Response>;
    takeModerationAction(data?: ComAtprotoAdminTakeModerationAction.InputSchema, opts?: ComAtprotoAdminTakeModerationAction.CallOptions): Promise<ComAtprotoAdminTakeModerationAction.Response>;
    updateAccountHandle(data?: ComAtprotoAdminUpdateAccountHandle.InputSchema, opts?: ComAtprotoAdminUpdateAccountHandle.CallOptions): Promise<ComAtprotoAdminUpdateAccountHandle.Response>;
}
export declare class IdentityNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    resolveHandle(params?: ComAtprotoIdentityResolveHandle.QueryParams, opts?: ComAtprotoIdentityResolveHandle.CallOptions): Promise<ComAtprotoIdentityResolveHandle.Response>;
    updateHandle(data?: ComAtprotoIdentityUpdateHandle.InputSchema, opts?: ComAtprotoIdentityUpdateHandle.CallOptions): Promise<ComAtprotoIdentityUpdateHandle.Response>;
}
export declare class LabelNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    queryLabels(params?: ComAtprotoLabelQueryLabels.QueryParams, opts?: ComAtprotoLabelQueryLabels.CallOptions): Promise<ComAtprotoLabelQueryLabels.Response>;
}
export declare class ModerationNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    createReport(data?: ComAtprotoModerationCreateReport.InputSchema, opts?: ComAtprotoModerationCreateReport.CallOptions): Promise<ComAtprotoModerationCreateReport.Response>;
}
export declare class RepoNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    applyWrites(data?: ComAtprotoRepoApplyWrites.InputSchema, opts?: ComAtprotoRepoApplyWrites.CallOptions): Promise<ComAtprotoRepoApplyWrites.Response>;
    createRecord(data?: ComAtprotoRepoCreateRecord.InputSchema, opts?: ComAtprotoRepoCreateRecord.CallOptions): Promise<ComAtprotoRepoCreateRecord.Response>;
    deleteRecord(data?: ComAtprotoRepoDeleteRecord.InputSchema, opts?: ComAtprotoRepoDeleteRecord.CallOptions): Promise<ComAtprotoRepoDeleteRecord.Response>;
    describeRepo(params?: ComAtprotoRepoDescribeRepo.QueryParams, opts?: ComAtprotoRepoDescribeRepo.CallOptions): Promise<ComAtprotoRepoDescribeRepo.Response>;
    getRecord(params?: ComAtprotoRepoGetRecord.QueryParams, opts?: ComAtprotoRepoGetRecord.CallOptions): Promise<ComAtprotoRepoGetRecord.Response>;
    listRecords(params?: ComAtprotoRepoListRecords.QueryParams, opts?: ComAtprotoRepoListRecords.CallOptions): Promise<ComAtprotoRepoListRecords.Response>;
    putRecord(data?: ComAtprotoRepoPutRecord.InputSchema, opts?: ComAtprotoRepoPutRecord.CallOptions): Promise<ComAtprotoRepoPutRecord.Response>;
    uploadBlob(data?: ComAtprotoRepoUploadBlob.InputSchema, opts?: ComAtprotoRepoUploadBlob.CallOptions): Promise<ComAtprotoRepoUploadBlob.Response>;
}
export declare class ServerNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    createAccount(data?: ComAtprotoServerCreateAccount.InputSchema, opts?: ComAtprotoServerCreateAccount.CallOptions): Promise<ComAtprotoServerCreateAccount.Response>;
    createInviteCode(data?: ComAtprotoServerCreateInviteCode.InputSchema, opts?: ComAtprotoServerCreateInviteCode.CallOptions): Promise<ComAtprotoServerCreateInviteCode.Response>;
    createInviteCodes(data?: ComAtprotoServerCreateInviteCodes.InputSchema, opts?: ComAtprotoServerCreateInviteCodes.CallOptions): Promise<ComAtprotoServerCreateInviteCodes.Response>;
    createSession(data?: ComAtprotoServerCreateSession.InputSchema, opts?: ComAtprotoServerCreateSession.CallOptions): Promise<ComAtprotoServerCreateSession.Response>;
    deleteAccount(data?: ComAtprotoServerDeleteAccount.InputSchema, opts?: ComAtprotoServerDeleteAccount.CallOptions): Promise<ComAtprotoServerDeleteAccount.Response>;
    deleteSession(data?: ComAtprotoServerDeleteSession.InputSchema, opts?: ComAtprotoServerDeleteSession.CallOptions): Promise<ComAtprotoServerDeleteSession.Response>;
    describeServer(params?: ComAtprotoServerDescribeServer.QueryParams, opts?: ComAtprotoServerDescribeServer.CallOptions): Promise<ComAtprotoServerDescribeServer.Response>;
    getAccountInviteCodes(params?: ComAtprotoServerGetAccountInviteCodes.QueryParams, opts?: ComAtprotoServerGetAccountInviteCodes.CallOptions): Promise<ComAtprotoServerGetAccountInviteCodes.Response>;
    getSession(params?: ComAtprotoServerGetSession.QueryParams, opts?: ComAtprotoServerGetSession.CallOptions): Promise<ComAtprotoServerGetSession.Response>;
    refreshSession(data?: ComAtprotoServerRefreshSession.InputSchema, opts?: ComAtprotoServerRefreshSession.CallOptions): Promise<ComAtprotoServerRefreshSession.Response>;
    requestAccountDelete(data?: ComAtprotoServerRequestAccountDelete.InputSchema, opts?: ComAtprotoServerRequestAccountDelete.CallOptions): Promise<ComAtprotoServerRequestAccountDelete.Response>;
    requestPasswordReset(data?: ComAtprotoServerRequestPasswordReset.InputSchema, opts?: ComAtprotoServerRequestPasswordReset.CallOptions): Promise<ComAtprotoServerRequestPasswordReset.Response>;
    resetPassword(data?: ComAtprotoServerResetPassword.InputSchema, opts?: ComAtprotoServerResetPassword.CallOptions): Promise<ComAtprotoServerResetPassword.Response>;
}
export declare class SyncNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    getBlob(params?: ComAtprotoSyncGetBlob.QueryParams, opts?: ComAtprotoSyncGetBlob.CallOptions): Promise<ComAtprotoSyncGetBlob.Response>;
    getBlocks(params?: ComAtprotoSyncGetBlocks.QueryParams, opts?: ComAtprotoSyncGetBlocks.CallOptions): Promise<ComAtprotoSyncGetBlocks.Response>;
    getCheckout(params?: ComAtprotoSyncGetCheckout.QueryParams, opts?: ComAtprotoSyncGetCheckout.CallOptions): Promise<ComAtprotoSyncGetCheckout.Response>;
    getCommitPath(params?: ComAtprotoSyncGetCommitPath.QueryParams, opts?: ComAtprotoSyncGetCommitPath.CallOptions): Promise<ComAtprotoSyncGetCommitPath.Response>;
    getHead(params?: ComAtprotoSyncGetHead.QueryParams, opts?: ComAtprotoSyncGetHead.CallOptions): Promise<ComAtprotoSyncGetHead.Response>;
    getRecord(params?: ComAtprotoSyncGetRecord.QueryParams, opts?: ComAtprotoSyncGetRecord.CallOptions): Promise<ComAtprotoSyncGetRecord.Response>;
    getRepo(params?: ComAtprotoSyncGetRepo.QueryParams, opts?: ComAtprotoSyncGetRepo.CallOptions): Promise<ComAtprotoSyncGetRepo.Response>;
    listBlobs(params?: ComAtprotoSyncListBlobs.QueryParams, opts?: ComAtprotoSyncListBlobs.CallOptions): Promise<ComAtprotoSyncListBlobs.Response>;
    listRepos(params?: ComAtprotoSyncListRepos.QueryParams, opts?: ComAtprotoSyncListRepos.CallOptions): Promise<ComAtprotoSyncListRepos.Response>;
    notifyOfUpdate(params?: ComAtprotoSyncNotifyOfUpdate.QueryParams, opts?: ComAtprotoSyncNotifyOfUpdate.CallOptions): Promise<ComAtprotoSyncNotifyOfUpdate.Response>;
    requestCrawl(params?: ComAtprotoSyncRequestCrawl.QueryParams, opts?: ComAtprotoSyncRequestCrawl.CallOptions): Promise<ComAtprotoSyncRequestCrawl.Response>;
}
export declare class AppNS {
    _service: AtpServiceClient;
    bsky: BskyNS;
    constructor(service: AtpServiceClient);
}
export declare class BskyNS {
    _service: AtpServiceClient;
    actor: ActorNS;
    embed: EmbedNS;
    feed: FeedNS;
    graph: GraphNS;
    notification: NotificationNS;
    richtext: RichtextNS;
    unspecced: UnspeccedNS;
    constructor(service: AtpServiceClient);
}
export declare class ActorNS {
    _service: AtpServiceClient;
    profile: ProfileRecord;
    constructor(service: AtpServiceClient);
    getProfile(params?: AppBskyActorGetProfile.QueryParams, opts?: AppBskyActorGetProfile.CallOptions): Promise<AppBskyActorGetProfile.Response>;
    getProfiles(params?: AppBskyActorGetProfiles.QueryParams, opts?: AppBskyActorGetProfiles.CallOptions): Promise<AppBskyActorGetProfiles.Response>;
    getSuggestions(params?: AppBskyActorGetSuggestions.QueryParams, opts?: AppBskyActorGetSuggestions.CallOptions): Promise<AppBskyActorGetSuggestions.Response>;
    searchActors(params?: AppBskyActorSearchActors.QueryParams, opts?: AppBskyActorSearchActors.CallOptions): Promise<AppBskyActorSearchActors.Response>;
    searchActorsTypeahead(params?: AppBskyActorSearchActorsTypeahead.QueryParams, opts?: AppBskyActorSearchActorsTypeahead.CallOptions): Promise<AppBskyActorSearchActorsTypeahead.Response>;
}
export declare class ProfileRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyActorProfile.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyActorProfile.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyActorProfile.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class EmbedNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
}
export declare class FeedNS {
    _service: AtpServiceClient;
    like: LikeRecord;
    post: PostRecord;
    repost: RepostRecord;
    constructor(service: AtpServiceClient);
    getAuthorFeed(params?: AppBskyFeedGetAuthorFeed.QueryParams, opts?: AppBskyFeedGetAuthorFeed.CallOptions): Promise<AppBskyFeedGetAuthorFeed.Response>;
    getLikes(params?: AppBskyFeedGetLikes.QueryParams, opts?: AppBskyFeedGetLikes.CallOptions): Promise<AppBskyFeedGetLikes.Response>;
    getPostThread(params?: AppBskyFeedGetPostThread.QueryParams, opts?: AppBskyFeedGetPostThread.CallOptions): Promise<AppBskyFeedGetPostThread.Response>;
    getRepostedBy(params?: AppBskyFeedGetRepostedBy.QueryParams, opts?: AppBskyFeedGetRepostedBy.CallOptions): Promise<AppBskyFeedGetRepostedBy.Response>;
    getTimeline(params?: AppBskyFeedGetTimeline.QueryParams, opts?: AppBskyFeedGetTimeline.CallOptions): Promise<AppBskyFeedGetTimeline.Response>;
}
export declare class LikeRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyFeedLike.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyFeedLike.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyFeedLike.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class PostRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyFeedPost.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyFeedPost.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyFeedPost.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class RepostRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyFeedRepost.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyFeedRepost.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyFeedRepost.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class GraphNS {
    _service: AtpServiceClient;
    follow: FollowRecord;
    constructor(service: AtpServiceClient);
    getFollowers(params?: AppBskyGraphGetFollowers.QueryParams, opts?: AppBskyGraphGetFollowers.CallOptions): Promise<AppBskyGraphGetFollowers.Response>;
    getFollows(params?: AppBskyGraphGetFollows.QueryParams, opts?: AppBskyGraphGetFollows.CallOptions): Promise<AppBskyGraphGetFollows.Response>;
    getMutes(params?: AppBskyGraphGetMutes.QueryParams, opts?: AppBskyGraphGetMutes.CallOptions): Promise<AppBskyGraphGetMutes.Response>;
    muteActor(data?: AppBskyGraphMuteActor.InputSchema, opts?: AppBskyGraphMuteActor.CallOptions): Promise<AppBskyGraphMuteActor.Response>;
    unmuteActor(data?: AppBskyGraphUnmuteActor.InputSchema, opts?: AppBskyGraphUnmuteActor.CallOptions): Promise<AppBskyGraphUnmuteActor.Response>;
}
export declare class FollowRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyGraphFollow.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyGraphFollow.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyGraphFollow.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class NotificationNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    getUnreadCount(params?: AppBskyNotificationGetUnreadCount.QueryParams, opts?: AppBskyNotificationGetUnreadCount.CallOptions): Promise<AppBskyNotificationGetUnreadCount.Response>;
    listNotifications(params?: AppBskyNotificationListNotifications.QueryParams, opts?: AppBskyNotificationListNotifications.CallOptions): Promise<AppBskyNotificationListNotifications.Response>;
    updateSeen(data?: AppBskyNotificationUpdateSeen.InputSchema, opts?: AppBskyNotificationUpdateSeen.CallOptions): Promise<AppBskyNotificationUpdateSeen.Response>;
}
export declare class RichtextNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
}
export declare class UnspeccedNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    getPopular(params?: AppBskyUnspeccedGetPopular.QueryParams, opts?: AppBskyUnspeccedGetPopular.CallOptions): Promise<AppBskyUnspeccedGetPopular.Response>;
}
