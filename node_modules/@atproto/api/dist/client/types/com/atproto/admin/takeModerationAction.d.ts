import { Headers, XRPCError } from '@atproto/xrpc';
import * as ComAtprotoAdminDefs from './defs';
import * as ComAtprotoRepoStrongRef from '../repo/strongRef';
export interface QueryParams {
}
export interface InputSchema {
    action: 'com.atproto.admin.defs#takedown' | 'com.atproto.admin.defs#flag' | 'com.atproto.admin.defs#acknowledge' | (string & {});
    subject: ComAtprotoAdminDefs.RepoRef | ComAtprotoRepoStrongRef.Main | {
        $type: string;
        [k: string]: unknown;
    };
    subjectBlobCids?: string[];
    createLabelVals?: string[];
    negateLabelVals?: string[];
    reason: string;
    createdBy: string;
    [k: string]: unknown;
}
export declare type OutputSchema = ComAtprotoAdminDefs.ActionView;
export interface CallOptions {
    headers?: Headers;
    qp?: QueryParams;
    encoding: 'application/json';
}
export interface Response {
    success: boolean;
    headers: Headers;
    data: OutputSchema;
}
export declare class SubjectHasActionError extends XRPCError {
    constructor(src: XRPCError);
}
export declare function toKnownErr(e: any): any;
