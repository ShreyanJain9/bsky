import { ValidationResult } from '@atproto/lexicon';
import * as ComAtprotoReportReasonType from '../report/reasonType';
import * as ComAtprotoRepoRepoRef from '../repo/repoRef';
import * as ComAtprotoRepoStrongRef from '../repo/strongRef';
import * as ComAtprotoAdminRepo from './repo';
import * as ComAtprotoAdminRecord from './record';
import * as ComAtprotoAdminModerationAction from './moderationAction';
export interface View {
    id: number;
    reasonType: ComAtprotoReportReasonType.Main;
    reason?: string;
    subject: ComAtprotoRepoRepoRef.Main | ComAtprotoRepoStrongRef.Main | {
        $type: string;
        [k: string]: unknown;
    };
    reportedByDid: string;
    createdAt: string;
    resolvedByActionIds: number[];
    [k: string]: unknown;
}
export declare function isView(v: unknown): v is View;
export declare function validateView(v: unknown): ValidationResult;
export interface ViewDetail {
    id: number;
    reasonType: ComAtprotoReportReasonType.Main;
    reason?: string;
    subject: ComAtprotoAdminRepo.View | ComAtprotoAdminRecord.View | {
        $type: string;
        [k: string]: unknown;
    };
    reportedByDid: string;
    createdAt: string;
    resolvedByActions: ComAtprotoAdminModerationAction.View[];
    [k: string]: unknown;
}
export declare function isViewDetail(v: unknown): v is ViewDetail;
export declare function validateViewDetail(v: unknown): ValidationResult;
