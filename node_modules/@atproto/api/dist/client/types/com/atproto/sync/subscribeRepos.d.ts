import { ValidationResult } from '@atproto/lexicon';
import { CID } from 'multiformats/cid';
export interface Commit {
    seq: number;
    rebase: boolean;
    tooBig: boolean;
    repo: string;
    commit: CID;
    prev: CID | null;
    blocks: Uint8Array;
    ops: RepoOp[];
    blobs: CID[];
    time: string;
    [k: string]: unknown;
}
export declare function isCommit(v: unknown): v is Commit;
export declare function validateCommit(v: unknown): ValidationResult;
export interface Handle {
    seq: number;
    did: string;
    handle: string;
    time: string;
    [k: string]: unknown;
}
export declare function isHandle(v: unknown): v is Handle;
export declare function validateHandle(v: unknown): ValidationResult;
export interface Migrate {
    seq: number;
    did: string;
    migrateTo: string | null;
    time: string;
    [k: string]: unknown;
}
export declare function isMigrate(v: unknown): v is Migrate;
export declare function validateMigrate(v: unknown): ValidationResult;
export interface Tombstone {
    seq: number;
    did: string;
    time: string;
    [k: string]: unknown;
}
export declare function isTombstone(v: unknown): v is Tombstone;
export declare function validateTombstone(v: unknown): ValidationResult;
export interface Info {
    name: 'OutdatedCursor' | (string & {});
    message?: string;
    [k: string]: unknown;
}
export declare function isInfo(v: unknown): v is Info;
export declare function validateInfo(v: unknown): ValidationResult;
export interface RepoOp {
    action: 'create' | 'update' | 'delete' | (string & {});
    path: string;
    cid: CID | null;
    [k: string]: unknown;
}
export declare function isRepoOp(v: unknown): v is RepoOp;
export declare function validateRepoOp(v: unknown): ValidationResult;
