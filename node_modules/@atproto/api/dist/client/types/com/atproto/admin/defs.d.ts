import { ValidationResult } from '@atproto/lexicon';
import * as ComAtprotoRepoStrongRef from '../repo/strongRef';
import * as ComAtprotoModerationDefs from '../moderation/defs';
import * as ComAtprotoServerDefs from '../server/defs';
export interface ActionView {
    id: number;
    action: ActionType;
    subject: RepoRef | ComAtprotoRepoStrongRef.Main | {
        $type: string;
        [k: string]: unknown;
    };
    subjectBlobCids: string[];
    createLabelVals?: string[];
    negateLabelVals?: string[];
    reason: string;
    createdBy: string;
    createdAt: string;
    reversal?: ActionReversal;
    resolvedReportIds: number[];
    [k: string]: unknown;
}
export declare function isActionView(v: unknown): v is ActionView;
export declare function validateActionView(v: unknown): ValidationResult;
export interface ActionViewDetail {
    id: number;
    action: ActionType;
    subject: RepoView | RecordView | {
        $type: string;
        [k: string]: unknown;
    };
    subjectBlobs: BlobView[];
    createLabelVals?: string[];
    negateLabelVals?: string[];
    reason: string;
    createdBy: string;
    createdAt: string;
    reversal?: ActionReversal;
    resolvedReports: ReportView[];
    [k: string]: unknown;
}
export declare function isActionViewDetail(v: unknown): v is ActionViewDetail;
export declare function validateActionViewDetail(v: unknown): ValidationResult;
export interface ActionViewCurrent {
    id: number;
    action: ActionType;
    [k: string]: unknown;
}
export declare function isActionViewCurrent(v: unknown): v is ActionViewCurrent;
export declare function validateActionViewCurrent(v: unknown): ValidationResult;
export interface ActionReversal {
    reason: string;
    createdBy: string;
    createdAt: string;
    [k: string]: unknown;
}
export declare function isActionReversal(v: unknown): v is ActionReversal;
export declare function validateActionReversal(v: unknown): ValidationResult;
export declare type ActionType = 'lex:com.atproto.admin.defs#takedown' | 'lex:com.atproto.admin.defs#flag' | 'lex:com.atproto.admin.defs#acknowledge' | (string & {});
export declare const TAKEDOWN = "com.atproto.admin.defs#takedown";
export declare const FLAG = "com.atproto.admin.defs#flag";
export declare const ACKNOWLEDGE = "com.atproto.admin.defs#acknowledge";
export interface ReportView {
    id: number;
    reasonType: ComAtprotoModerationDefs.ReasonType;
    reason?: string;
    subject: RepoRef | ComAtprotoRepoStrongRef.Main | {
        $type: string;
        [k: string]: unknown;
    };
    reportedBy: string;
    createdAt: string;
    resolvedByActionIds: number[];
    [k: string]: unknown;
}
export declare function isReportView(v: unknown): v is ReportView;
export declare function validateReportView(v: unknown): ValidationResult;
export interface ReportViewDetail {
    id: number;
    reasonType: ComAtprotoModerationDefs.ReasonType;
    reason?: string;
    subject: RepoView | RecordView | {
        $type: string;
        [k: string]: unknown;
    };
    reportedBy: string;
    createdAt: string;
    resolvedByActions: ActionView[];
    [k: string]: unknown;
}
export declare function isReportViewDetail(v: unknown): v is ReportViewDetail;
export declare function validateReportViewDetail(v: unknown): ValidationResult;
export interface RepoView {
    did: string;
    handle: string;
    email?: string;
    relatedRecords: {}[];
    indexedAt: string;
    moderation: Moderation;
    invitedBy?: ComAtprotoServerDefs.InviteCode;
    [k: string]: unknown;
}
export declare function isRepoView(v: unknown): v is RepoView;
export declare function validateRepoView(v: unknown): ValidationResult;
export interface RepoViewDetail {
    did: string;
    handle: string;
    email?: string;
    relatedRecords: {}[];
    indexedAt: string;
    moderation: ModerationDetail;
    invitedBy?: ComAtprotoServerDefs.InviteCode;
    invites?: ComAtprotoServerDefs.InviteCode[];
    [k: string]: unknown;
}
export declare function isRepoViewDetail(v: unknown): v is RepoViewDetail;
export declare function validateRepoViewDetail(v: unknown): ValidationResult;
export interface RepoRef {
    did: string;
    [k: string]: unknown;
}
export declare function isRepoRef(v: unknown): v is RepoRef;
export declare function validateRepoRef(v: unknown): ValidationResult;
export interface RecordView {
    uri: string;
    cid: string;
    value: {};
    blobCids: string[];
    indexedAt: string;
    moderation: Moderation;
    repo: RepoView;
    [k: string]: unknown;
}
export declare function isRecordView(v: unknown): v is RecordView;
export declare function validateRecordView(v: unknown): ValidationResult;
export interface RecordViewDetail {
    uri: string;
    cid: string;
    value: {};
    blobs: BlobView[];
    indexedAt: string;
    moderation: ModerationDetail;
    repo: RepoView;
    [k: string]: unknown;
}
export declare function isRecordViewDetail(v: unknown): v is RecordViewDetail;
export declare function validateRecordViewDetail(v: unknown): ValidationResult;
export interface Moderation {
    currentAction?: ActionViewCurrent;
    [k: string]: unknown;
}
export declare function isModeration(v: unknown): v is Moderation;
export declare function validateModeration(v: unknown): ValidationResult;
export interface ModerationDetail {
    currentAction?: ActionViewCurrent;
    actions: ActionView[];
    reports: ReportView[];
    [k: string]: unknown;
}
export declare function isModerationDetail(v: unknown): v is ModerationDetail;
export declare function validateModerationDetail(v: unknown): ValidationResult;
export interface BlobView {
    cid: string;
    mimeType: string;
    size: number;
    createdAt: string;
    details?: ImageDetails | VideoDetails | {
        $type: string;
        [k: string]: unknown;
    };
    moderation?: Moderation;
    [k: string]: unknown;
}
export declare function isBlobView(v: unknown): v is BlobView;
export declare function validateBlobView(v: unknown): ValidationResult;
export interface ImageDetails {
    width: number;
    height: number;
    [k: string]: unknown;
}
export declare function isImageDetails(v: unknown): v is ImageDetails;
export declare function validateImageDetails(v: unknown): ValidationResult;
export interface VideoDetails {
    width: number;
    height: number;
    length: number;
    [k: string]: unknown;
}
export declare function isVideoDetails(v: unknown): v is VideoDetails;
export declare function validateVideoDetails(v: unknown): ValidationResult;
