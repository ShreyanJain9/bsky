import { ValidationResult } from '@atproto/lexicon';
import * as AppBskyActorDefs from '../actor/defs';
import * as AppBskyEmbedImages from '../embed/images';
import * as AppBskyEmbedExternal from '../embed/external';
import * as AppBskyEmbedRecord from '../embed/record';
import * as AppBskyEmbedRecordWithMedia from '../embed/recordWithMedia';
import * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs';
export interface PostView {
    uri: string;
    cid: string;
    author: AppBskyActorDefs.ProfileViewBasic;
    record: {};
    embed?: AppBskyEmbedImages.View | AppBskyEmbedExternal.View | AppBskyEmbedRecord.View | AppBskyEmbedRecordWithMedia.View | {
        $type: string;
        [k: string]: unknown;
    };
    replyCount?: number;
    repostCount?: number;
    likeCount?: number;
    indexedAt: string;
    viewer?: ViewerState;
    labels?: ComAtprotoLabelDefs.Label[];
    [k: string]: unknown;
}
export declare function isPostView(v: unknown): v is PostView;
export declare function validatePostView(v: unknown): ValidationResult;
export interface ViewerState {
    repost?: string;
    like?: string;
    [k: string]: unknown;
}
export declare function isViewerState(v: unknown): v is ViewerState;
export declare function validateViewerState(v: unknown): ValidationResult;
export interface FeedViewPost {
    post: PostView;
    reply?: ReplyRef;
    reason?: ReasonRepost | {
        $type: string;
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
export declare function isFeedViewPost(v: unknown): v is FeedViewPost;
export declare function validateFeedViewPost(v: unknown): ValidationResult;
export interface ReplyRef {
    root: PostView;
    parent: PostView;
    [k: string]: unknown;
}
export declare function isReplyRef(v: unknown): v is ReplyRef;
export declare function validateReplyRef(v: unknown): ValidationResult;
export interface ReasonRepost {
    by: AppBskyActorDefs.ProfileViewBasic;
    indexedAt: string;
    [k: string]: unknown;
}
export declare function isReasonRepost(v: unknown): v is ReasonRepost;
export declare function validateReasonRepost(v: unknown): ValidationResult;
export interface ThreadViewPost {
    post: PostView;
    parent?: ThreadViewPost | NotFoundPost | {
        $type: string;
        [k: string]: unknown;
    };
    replies?: (ThreadViewPost | NotFoundPost | {
        $type: string;
        [k: string]: unknown;
    })[];
    [k: string]: unknown;
}
export declare function isThreadViewPost(v: unknown): v is ThreadViewPost;
export declare function validateThreadViewPost(v: unknown): ValidationResult;
export interface NotFoundPost {
    uri: string;
    notFound: true;
    [k: string]: unknown;
}
export declare function isNotFoundPost(v: unknown): v is NotFoundPost;
export declare function validateNotFoundPost(v: unknown): ValidationResult;
