import { ValidationResult } from '@atproto/lexicon';
import * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef';
import * as AppBskyActorDefs from '../actor/defs';
import * as AppBskyEmbedImages from './images';
import * as AppBskyEmbedExternal from './external';
import * as AppBskyEmbedRecordWithMedia from './recordWithMedia';
export interface Main {
    record: ComAtprotoRepoStrongRef.Main;
    [k: string]: unknown;
}
export declare function isMain(v: unknown): v is Main;
export declare function validateMain(v: unknown): ValidationResult;
export interface View {
    record: ViewRecord | ViewNotFound | {
        $type: string;
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
export declare function isView(v: unknown): v is View;
export declare function validateView(v: unknown): ValidationResult;
export interface ViewRecord {
    uri: string;
    cid: string;
    author: AppBskyActorDefs.ProfileViewBasic;
    value: {};
    embeds?: (AppBskyEmbedImages.View | AppBskyEmbedExternal.View | View | AppBskyEmbedRecordWithMedia.View | {
        $type: string;
        [k: string]: unknown;
    })[];
    indexedAt: string;
    [k: string]: unknown;
}
export declare function isViewRecord(v: unknown): v is ViewRecord;
export declare function validateViewRecord(v: unknown): ValidationResult;
export interface ViewNotFound {
    uri: string;
    [k: string]: unknown;
}
export declare function isViewNotFound(v: unknown): v is ViewNotFound;
export declare function validateViewNotFound(v: unknown): ValidationResult;
