import { ValidationResult } from '@atproto/lexicon';
import * as AppBskyRichtextFacet from '../richtext/facet';
import * as AppBskyEmbedImages from '../embed/images';
import * as AppBskyEmbedExternal from '../embed/external';
import * as AppBskyEmbedRecord from '../embed/record';
import * as AppBskyEmbedRecordWithMedia from '../embed/recordWithMedia';
import * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef';
export interface Record {
    text: string;
    entities?: Entity[];
    facets?: AppBskyRichtextFacet.Main[];
    reply?: ReplyRef;
    embed?: AppBskyEmbedImages.Main | AppBskyEmbedExternal.Main | AppBskyEmbedRecord.Main | AppBskyEmbedRecordWithMedia.Main | {
        $type: string;
        [k: string]: unknown;
    };
    createdAt: string;
    [k: string]: unknown;
}
export declare function isRecord(v: unknown): v is Record;
export declare function validateRecord(v: unknown): ValidationResult;
export interface ReplyRef {
    root: ComAtprotoRepoStrongRef.Main;
    parent: ComAtprotoRepoStrongRef.Main;
    [k: string]: unknown;
}
export declare function isReplyRef(v: unknown): v is ReplyRef;
export declare function validateReplyRef(v: unknown): ValidationResult;
export interface Entity {
    index: TextSlice;
    type: string;
    value: string;
    [k: string]: unknown;
}
export declare function isEntity(v: unknown): v is Entity;
export declare function validateEntity(v: unknown): ValidationResult;
export interface TextSlice {
    start: number;
    end: number;
    [k: string]: unknown;
}
export declare function isTextSlice(v: unknown): v is TextSlice;
export declare function validateTextSlice(v: unknown): ValidationResult;
