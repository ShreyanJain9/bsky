export declare type AtpSessionEvent = 'create' | 'create-failed' | 'update' | 'expired';
export interface AtpSessionData {
    refreshJwt: string;
    accessJwt: string;
    handle: string;
    did: string;
    email?: string;
}
export declare type AtpPersistSessionHandler = (evt: AtpSessionEvent, session: AtpSessionData | undefined) => void | Promise<void>;
export interface AtpAgentOpts {
    service: string | URL;
    persistSession?: AtpPersistSessionHandler;
}
export interface AtpAgentCreateAccountOpts {
    email: string;
    password: string;
    handle: string;
    inviteCode?: string;
}
export interface AtpAgentLoginOpts {
    identifier: string;
    password: string;
}
declare type AtpAgentFetchHeaders = Record<string, string>;
export interface AtpAgentFetchHandlerResponse {
    status: number;
    headers: Record<string, string>;
    body: any;
}
export declare type AtpAgentFetchHandler = (httpUri: string, httpMethod: string, httpHeaders: AtpAgentFetchHeaders, httpReqBody: any) => Promise<AtpAgentFetchHandlerResponse>;
export interface AtpAgentGlobalOpts {
    fetch: AtpAgentFetchHandler;
}
export {};
